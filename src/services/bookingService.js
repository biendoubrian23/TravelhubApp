import { supabase } from './supabaseClient'

export const bookingService = {
  // V√©rifier et appliquer le discount de parrainage
  async checkReferralDiscount(userId) {
    try {
      // V√©rifier si l'utilisateur a √©t√© parrain√©
      const { data: referralData, error: referralError } = await supabase
        .from('referrals')
        .select('*')
        .eq('referred_id', userId)
        .single()

      if (referralError || !referralData) {
        console.log('üë§ Aucun parrainage trouv√© pour cet utilisateur')
        return { hasDiscount: false, discount: 0 }
      }

      // NOTE: Dans notre syst√®me, seul le PARRAIN re√ßoit 500 FCFA, pas le filleul
      // Le filleul n'a aucune r√©duction, c'est juste pour aider le parrain √† gagner
      console.log('ÔøΩ Utilisateur parrain√© trouv√©, mais aucune r√©duction pour le filleul')
      console.log('üí∞ Le parrain recevra 500 FCFA apr√®s la premi√®re r√©servation du filleul')
      
      return { hasDiscount: false, discount: 0, referralId: referralData.id }
    } catch (error) {
      console.error('Erreur lors de la v√©rification du parrainage:', error)
      return { hasDiscount: false, discount: 0 }
    }
  },

  // Cr√©er plusieurs r√©servations (une par si√®ge)
  async createMultipleBookings(bookingData) {
    try {
      console.log('=== D√âBUT CR√âATION R√âSERVATIONS MULTIPLES ===');
      console.log('Donn√©es re√ßues:', bookingData);
      
      // Validation des donn√©es essentielles
      if (!bookingData.tripId || !bookingData.userId) {
        throw new Error('tripId et userId sont obligatoires');
      }

      // R√©cup√©rer les vraies informations de l'utilisateur
      const { authService } = await import('./supabase');
      await authService.ensureUserProfile(bookingData.userId);
      
      let { data: userData, error: userError } = await supabase
        .from('users')
        .select('full_name, phone, ville, email')
        .eq('id', bookingData.userId)
        .single();

      if (userError) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les infos utilisateur:', userError);
        // Fallback sur les donn√©es Supabase Auth
        const { data: { user } } = await supabase.auth.getUser();
        userData = {
          full_name: user?.user_metadata?.full_name || user?.full_name || 'Client TravelHub',
          phone: user?.user_metadata?.phone || user?.phone || bookingData.passengerPhone || '+237600000000',
          ville: user?.user_metadata?.ville || null,
          email: user?.email
        };
      } else {
        // M√™me si la requ√™te r√©ussit, v√©rifier si les donn√©es critiques sont pr√©sentes
        // Si phone ou ville manquent, utiliser les m√©tadonn√©es Auth
        if (!userData.phone || !userData.ville) {
          console.log('‚ö†Ô∏è Donn√©es manquantes dans la table users, utilisation des m√©tadonn√©es Auth');
          const { data: { user } } = await supabase.auth.getUser();
          userData = {
            ...userData,
            phone: userData.phone || user?.user_metadata?.phone || user?.phone || bookingData.passengerPhone || '+237600000000',
            ville: userData.ville || user?.user_metadata?.ville || null,
          };
        }
      }

      console.log('üë§ Informations utilisateur r√©cup√©r√©es:', userData);
      
      let finalSeatNumbers = [];
      
      // G√©rer l'attribution des si√®ges
      console.log('ü™ë Analyse des si√®ges re√ßus:');
      console.log('- selectedSeats:', bookingData.selectedSeats);
      console.log('- seatNumber:', bookingData.seatNumber);
      console.log('- Type selectedSeats:', typeof bookingData.selectedSeats);
      console.log('- Est array:', Array.isArray(bookingData.selectedSeats));
      
      if (bookingData.selectedSeats && Array.isArray(bookingData.selectedSeats)) {
        console.log('üìã Traitement si√®ges VIP array...');
        finalSeatNumbers = bookingData.selectedSeats.map(seat => {
          const seatNumber = typeof seat === 'object' ? seat.seat_number || seat.number : seat;
          console.log('- Si√®ge mapp√©:', seat, '‚Üí', seatNumber);
          return seatNumber;
        });
      } else if (bookingData.seatNumber) {
        console.log('üìã Traitement si√®ge unique...');
        finalSeatNumbers = [bookingData.seatNumber];
      } else {
        console.log('üìã Attribution automatique pour trajets non-VIP...');
        // Attribution automatique pour trajets non-VIP
        const { busService } = await import('./busService');
        const numberOfSeats = bookingData.passengers || 1;
        const assignedSeats = await busService.autoReserveSeats(bookingData.tripId, numberOfSeats);
        finalSeatNumbers = assignedSeats.map(seat => seat.seat_number);
      }

      console.log('Si√®ges √† r√©server:', finalSeatNumbers);

      // V√©rifier que les si√®ges existent et sont disponibles
      const { data: existingSeats, error: seatCheckError } = await supabase
        .from('seat_maps')
        .select('seat_number, is_available')
        .eq('trip_id', bookingData.tripId)
        .in('seat_number', finalSeatNumbers);

      if (seatCheckError) {
        throw new Error('Impossible de v√©rifier la disponibilit√© des si√®ges');
      }

      const unavailableSeats = existingSeats?.filter(seat => !seat.is_available) || [];
      if (unavailableSeats.length > 0) {
        throw new Error(`Si√®ges d√©j√† occup√©s: ${unavailableSeats.map(s => s.seat_number).join(', ')}`);
      }

      // Marquer tous les si√®ges comme occup√©s d'abord
      const { error: seatError } = await supabase
        .from('seat_maps')
        .update({ is_available: false })
        .eq('trip_id', bookingData.tripId)
        .in('seat_number', finalSeatNumbers);

      if (seatError) {
        throw new Error('Impossible de r√©server les si√®ges s√©lectionn√©s');
      }

      console.log(`‚úÖ Si√®ges ${finalSeatNumbers.join(', ')} marqu√©s comme occup√©s`);

      // V√©rifier le parrainage pour r√©compenser le parrain (pas de r√©duction pour le filleul)
      const referralInfo = await this.checkReferralDiscount(bookingData.userId);
      console.log('üí∞ Informations de parrainage:', referralInfo);

      // Cr√©er une r√©servation pour chaque si√®ge
      const createdBookings = [];
      const basePrice = bookingData.totalPrice ? Math.floor(bookingData.totalPrice / finalSeatNumbers.length) : 0;
      
      for (let i = 0; i < finalSeatNumbers.length; i++) {
        const seatNumber = finalSeatNumbers[i];
        
        const reservationData = {
          trip_id: bookingData.tripId,
          user_id: bookingData.userId,
          seat_number: seatNumber, // UN SEUL si√®ge par r√©servation
          passenger_name: userData.full_name || 'Client TravelHub',
          passenger_phone: userData.phone || '+237600000000',
          total_price_fcfa: basePrice, // Pas de r√©duction pour le filleul
          original_price: basePrice, // Prix original avant r√©duction
          applied_discount: 0, // Pas de r√©duction pour le filleul
          discount_type: null, // Pas de type de r√©duction
          booking_reference: `TH${Date.now()}-${i + 1}`, // R√©f√©rence unique pour chaque r√©servation
          booking_status: 'confirmed',
          payment_status: 'pending',
          payment_method: bookingData.paymentMethod || 'orange_money' // Ajouter le moyen de paiement
        };

        console.log(`Cr√©ation r√©servation ${i + 1}/${finalSeatNumbers.length} pour si√®ge ${seatNumber}:`, reservationData);

        const { data, error } = await supabase
          .from('bookings')
          .insert(reservationData)
          .select()
          .single();

        if (error) {
          console.error(`‚ùå Erreur cr√©ation r√©servation si√®ge ${seatNumber}:`, error);
          // En cas d'erreur, lib√©rer les si√®ges d√©j√† occup√©s
          await supabase
            .from('seat_maps')
            .update({ is_available: true })
            .eq('trip_id', bookingData.tripId)
            .in('seat_number', finalSeatNumbers);
          throw error;
        }

        createdBookings.push(data);
        console.log(`‚úÖ R√©servation cr√©√©e pour si√®ge ${seatNumber}:`, data.id);
      }

      // Si l'utilisateur a √©t√© parrain√©, cr√©er la r√©compense pour le parrain
      if (referralInfo.referralId) {
        await this.createReferralReward(referralInfo.referralId, bookingData.userId, 500);
      }

      console.log('=== FIN CR√âATION R√âSERVATIONS MULTIPLES ===');
      console.log(`‚úÖ ${createdBookings.length} r√©servations cr√©√©es avec succ√®s`);
      return createdBookings;
      
    } catch (error) {
      console.error('‚ùå ERREUR G√âN√âRALE createMultipleBookings:', error);
      throw error;
    }
  },

  // Cr√©er une nouvelle r√©servation (ancienne version - maintenant utilis√©e pour une seule r√©servation)
  async createBooking(bookingData) {
    try {
      console.log('=== D√âBUT CR√âATION R√âSERVATION ===');
      console.log('Donn√©es re√ßues:', bookingData);
      
      // Validation des donn√©es essentielles
      if (!bookingData.tripId || !bookingData.userId) {
        throw new Error('tripId et userId sont obligatoires');
      }

      // üõ°Ô∏è V√©rifier s'il existe d√©j√† une r√©servation pour ce voyage et cet utilisateur
      console.log('V√©rification des doublons pour trip:', bookingData.tripId, 'user:', bookingData.userId);
      const { data: existingBookings, error: checkError } = await supabase
        .from('bookings')
        .select('id, booking_reference')
        .eq('trip_id', bookingData.tripId)
        .eq('user_id', bookingData.userId)
        .eq('booking_status', 'confirmed');

      if (checkError) {
        console.warn('‚ö†Ô∏è Erreur lors de la v√©rification des doublons:', checkError);
      } else if (existingBookings && existingBookings.length > 0) {
        console.log('üõë R√©servation existante trouv√©e, pas de duplication:', existingBookings[0]);
        return existingBookings[0]; // Retourner la r√©servation existante
      }

      // üÜï R√©cup√©rer les vraies informations de l'utilisateur depuis la table users
      console.log('R√©cup√©ration des informations utilisateur...');
      
      // D'abord s'assurer que l'utilisateur existe dans la table users
      const { authService } = await import('./supabase');
      await authService.ensureUserProfile(bookingData.userId);
      
      let { data: userData, error: userError } = await supabase
        .from('users')
        .select('full_name, phone, ville, email')
        .eq('id', bookingData.userId)
        .single();

      if (userError) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les infos utilisateur:', userError);
        // Fallback sur les donn√©es Supabase Auth
        const { data: { user } } = await supabase.auth.getUser();
        userData = {
          full_name: user?.user_metadata?.full_name || user?.full_name || 'Client TravelHub',
          phone: user?.user_metadata?.phone || user?.phone || bookingData.passengerPhone || '+237600000000',
          ville: user?.user_metadata?.ville || null,
          email: user?.email
        };
      } else {
        // M√™me si la requ√™te r√©ussit, v√©rifier si les donn√©es critiques sont pr√©sentes
        // Si phone ou ville manquent, utiliser les m√©tadonn√©es Auth
        if (!userData.phone || !userData.ville) {
          console.log('‚ö†Ô∏è Donn√©es manquantes dans la table users, utilisation des m√©tadonn√©es Auth');
          const { data: { user } } = await supabase.auth.getUser();
          userData = {
            ...userData,
            phone: userData.phone || user?.user_metadata?.phone || user?.phone || bookingData.passengerPhone || '+237600000000',
            ville: userData.ville || user?.user_metadata?.ville || null,
          };
        }
      }

      console.log('üë§ Informations utilisateur r√©cup√©r√©es:', userData);
      
      let finalSeatNumbers = [];
      
      // 1. G√©rer l'attribution des si√®ges
      if (bookingData.seatNumber || bookingData.selectedSeats) {
        // Si√®ges d√©j√† s√©lectionn√©s (VIP par exemple)
        if (bookingData.selectedSeats) {
          finalSeatNumbers = Array.isArray(bookingData.selectedSeats) 
            ? bookingData.selectedSeats.map(seat => 
                typeof seat === 'object' ? seat.seat_number || seat.number : seat
              )
            : [bookingData.selectedSeats]
        } else if (bookingData.seatNumber) {
          finalSeatNumbers = [bookingData.seatNumber]
        }

        console.log('Si√®ges √† r√©server:', finalSeatNumbers);

        // V√©rifier que les si√®ges existent et sont disponibles
        const { data: existingSeats, error: seatCheckError } = await supabase
          .from('seat_maps')
          .select('seat_number, is_available')
          .eq('trip_id', bookingData.tripId)
          .in('seat_number', finalSeatNumbers);

        if (seatCheckError) {
          console.error('Erreur lors de la v√©rification des si√®ges:', seatCheckError);
          throw new Error('Impossible de v√©rifier la disponibilit√© des si√®ges');
        }

        const unavailableSeats = existingSeats?.filter(seat => !seat.is_available) || [];
        if (unavailableSeats.length > 0) {
          console.warn('Si√®ges d√©j√† occup√©s:', unavailableSeats.map(s => s.seat_number));
          // Continue quand m√™me mais log l'avertissement
        }

        // Marquer les si√®ges comme occup√©s
        const { error: seatError } = await supabase
          .from('seat_maps')
          .update({ is_available: false })
          .eq('trip_id', bookingData.tripId)
          .in('seat_number', finalSeatNumbers)

        if (seatError) {
          console.error('Erreur lors de la r√©servation des si√®ges:', seatError)
          throw new Error('Impossible de r√©server les si√®ges s√©lectionn√©s')
        }

        console.log(`‚úÖ Si√®ges ${finalSeatNumbers.join(', ')} marqu√©s comme occup√©s`)
      } else {
        // Aucun si√®ge sp√©cifi√© -> Attribution automatique pour trajets non-VIP
        console.log('Attribution automatique de si√®ges...')
        
        try {
          const { busService } = await import('./busService')
          const assignedSeats = await busService.autoReserveSeats(bookingData.tripId, 1)
          finalSeatNumbers = assignedSeats.map(seat => seat.seat_number)
          
          console.log(`Si√®ges automatiquement attribu√©s: ${finalSeatNumbers.join(', ')}`)
        } catch (autoSeatError) {
          console.error('Erreur attribution automatique:', autoSeatError);
          // Fallback: prendre le premier si√®ge disponible
          const { data: availableSeats } = await supabase
            .from('seat_maps')
            .select('seat_number')
            .eq('trip_id', bookingData.tripId)
            .eq('is_available', true)
            .limit(1);
            
          if (availableSeats?.length > 0) {
            finalSeatNumbers = [availableSeats[0].seat_number];
            await supabase
              .from('seat_maps')
              .update({ is_available: false })
              .eq('trip_id', bookingData.tripId)
              .eq('seat_number', finalSeatNumbers[0]);
            console.log(`Si√®ge de fallback attribu√©: ${finalSeatNumbers[0]}`);
          } else {
            throw new Error('Aucun si√®ge disponible');
          }
        }
      }

      // 2. Pr√©parer les donn√©es de r√©servation avec les VRAIES informations utilisateur
      const reservationData = {
        trip_id: bookingData.tripId,
        user_id: bookingData.userId,
        seat_number: finalSeatNumbers.join(', '),
        // üÜï Utiliser les vraies informations de l'utilisateur
        passenger_name: userData.full_name || 'Client TravelHub',
        passenger_phone: userData.phone || '+237600000000',
        // Retirer passenger_email car cette colonne n'existe pas dans la table bookings
        total_price_fcfa: bookingData.totalPrice || 0,
        booking_reference: `TH${Date.now()}`,
        booking_status: 'confirmed',
        payment_status: 'pending'
      };

      console.log('‚úÖ Donn√©es de r√©servation avec vraies infos utilisateur:', reservationData);

      // 3. Essayer l'insertion avec gestion d'erreur d√©taill√©e
      console.log('Tentative d\'insertion dans bookings...');
      
      const { data, error } = await supabase
        .from('bookings')
        .insert(reservationData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå ERREUR INSERTION BOOKING:');
        console.error('Code:', error.code);
        console.error('Message:', error.message);
        console.error('D√©tails:', error.details);
        console.error('Hint:', error.hint);
        
        // Ne pas faire √©chouer compl√®tement, juste logger
        console.log('‚ö†Ô∏è R√©servation non sauv√©e en BD mais si√®ges marqu√©s occup√©s');
        
        // Retourner un objet mock pour que l'app continue √† fonctionner
        return {
          id: `MOCK_${Date.now()}`,
          ...reservationData,
          created_at: new Date().toISOString()
        };
      }

      console.log('‚úÖ R√âSERVATION CR√â√âE AVEC SUCC√àS:', data);
      
      // 4. Optionnel: Mettre √† jour le statut de paiement
      if (bookingData.paymentMethod) {
        try {
          await supabase
            .from('bookings')
            .update({ 
              payment_method: bookingData.paymentMethod
            })
            .eq('id', data.id);
          
          console.log('‚úÖ M√©thode de paiement mise √† jour');
        } catch (paymentUpdateError) {
          console.warn('‚ö†Ô∏è Impossible de mettre √† jour la m√©thode de paiement:', paymentUpdateError);
        }
      }
      
      console.log('=== FIN CR√âATION R√âSERVATION ===');
      return data;
      
    } catch (error) {
      console.error('‚ùå ERREUR G√âN√âRALE createBooking:', error);
      throw error;
    }
  },

  // Mettre √† jour le statut de paiement de plusieurs r√©servations (pour les r√©servations multiples)
  async updateMultiplePaymentStatus(bookingIds, paymentStatus, paymentDetails = {}) {
    try {
      console.log(`Mise √† jour du statut de paiement pour ${bookingIds.length} r√©servations:`, bookingIds);
      
      const updateData = {
        payment_status: paymentStatus,
        updated_at: new Date().toISOString()
      }

      // Ajouter les d√©tails de paiement si fournis
      if (paymentDetails.transactionId) {
        updateData.payment_transaction_id = paymentDetails.transactionId
      }
      if (paymentDetails.paymentMethod) {
        updateData.payment_method = paymentDetails.paymentMethod
      }
      if (paymentStatus === 'completed') {
        updateData.paid_at = new Date().toISOString()
      }

      const { data, error } = await supabase
        .from('bookings')
        .update(updateData)
        .in('id', bookingIds)
        .select()

      if (error) {
        console.error('Erreur lors de la mise √† jour des paiements multiples:', error)
        throw error
      }

      console.log(`‚úÖ Statut de paiement mis √† jour pour ${data.length} r√©servations:`, data)
      return data
    } catch (error) {
      console.error('Erreur dans updateMultiplePaymentStatus:', error)
      throw error
    }
  },

  // Mettre √† jour le statut de paiement d'une r√©servation
  async updatePaymentStatus(bookingId, paymentStatus, paymentDetails = {}) {
    try {
      const updateData = {
        payment_status: paymentStatus,
        updated_at: new Date().toISOString()
      }

      // Ajouter les d√©tails de paiement si fournis
      if (paymentDetails.transactionId) {
        updateData.payment_transaction_id = paymentDetails.transactionId
      }
      if (paymentDetails.paymentMethod) {
        updateData.payment_method = paymentDetails.paymentMethod
      }
      if (paymentStatus === 'completed') {
        updateData.paid_at = new Date().toISOString()
      }

      const { data, error } = await supabase
        .from('bookings')
        .update(updateData)
        .eq('id', bookingId)
        .select()
        .single()

      if (error) {
        console.error('Erreur lors de la mise √† jour du paiement:', error)
        throw error
      }

      console.log('Statut de paiement mis √† jour:', data)
      return data
    } catch (error) {
      console.error('Erreur dans updatePaymentStatus:', error)
      throw error
    }
  },

  // R√©cup√©rer toutes les r√©servations d'un utilisateur
  async getUserBookings(userId) {
    try {
      // D'abord r√©cup√©rer les r√©servations de base
      const { data: bookingsData, error: bookingsError } = await supabase
        .from('bookings')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })

      if (bookingsError) {
        console.error('Erreur lors de la r√©cup√©ration des r√©servations:', bookingsError)
        throw bookingsError
      }

      if (!bookingsData || bookingsData.length === 0) {
        console.log('üì≠ Aucune r√©servation trouv√©e pour cet utilisateur');
        return []
      }

      console.log('üìã R√©servations trouv√©es:', bookingsData.length);
      console.log('üìã Premi√®re r√©servation:', bookingsData[0]);

      // Ensuite r√©cup√©rer les informations des trajets s√©par√©ment
      const tripIds = [...new Set(bookingsData.map(booking => booking.trip_id).filter(Boolean))]
      console.log('üöå Trip IDs √† r√©cup√©rer:', tripIds);
      
      if (tripIds.length === 0) {
        console.warn('‚ö†Ô∏è Aucun trip_id trouv√© dans les r√©servations');
        return bookingsData.map(booking => ({
          ...booking,
          trips: {
            ville_depart: 'Ville inconnue',
            ville_arrivee: 'Ville inconnue',
            date: new Date().toISOString().split('T')[0],
            heure_dep: '00:00',
            heure_arr: '00:00',
            agencies: { nom: 'TravelHub' }
          }
        }))
      }

      const { data: tripsData, error: tripsError } = await supabase
        .from('trips')
        .select(`
          id,
          departure_city,
          arrival_city,
          departure_time,
          arrival_time,
          agency_id,
          bus_type
        `)
        .in('id', tripIds)

      console.log('üöå Trajets r√©cup√©r√©s:', tripsData);
      console.log('üöå Erreur trajets:', tripsError);

      if (tripsError) {
        console.warn('Erreur lors de la r√©cup√©ration des trajets:', tripsError)
        // Continuer avec des valeurs par d√©faut
      }

      // R√©cup√©rer les agences s√©par√©ment si on a des trips
      const agencyIds = tripsData ? [...new Set(tripsData.map(trip => trip.agency_id).filter(Boolean))] : []
      let agenciesData = []
      
      if (agencyIds.length > 0) {
        const { data: agencies, error: agenciesError } = await supabase
          .from('agencies')
          .select('id, nom')
          .in('id', agencyIds)
          
        if (!agenciesError) {
          agenciesData = agencies || []
        }
      }

      // Combiner les donn√©es
      const enrichedBookings = bookingsData.map(booking => {
        const trip = tripsData?.find(t => t.id === booking.trip_id) || {}
        const agency = agenciesData.find(a => a.id === trip.agency_id) || {}
        
        // Extraire les heures depuis departure_time et arrival_time
        const departureTime = trip.departure_time ? new Date(trip.departure_time) : null
        const arrivalTime = trip.arrival_time ? new Date(trip.arrival_time) : null
        
        const heure_dep = departureTime ? departureTime.toLocaleTimeString('fr-FR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }) : '00:00'
        
        const heure_arr = arrivalTime ? arrivalTime.toLocaleTimeString('fr-FR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }) : '00:00'
        
        const date = departureTime ? departureTime.toISOString().split('T')[0] : new Date().toISOString().split('T')[0]
        
        console.log(`üîÑ Enrichissement booking ${booking.id}:`, {
          booking_trip_id: booking.trip_id,
          found_trip: trip,
          departure_city: trip.departure_city,
          arrival_city: trip.arrival_city,
          departure_time: trip.departure_time,
          arrival_time: trip.arrival_time,
          heure_dep,
          heure_arr,
          found_agency: agency
        });
        
        return {
          ...booking,
          trips: {
            ...trip,
            ville_depart: trip.departure_city || 'Ville inconnue',
            ville_arrivee: trip.arrival_city || 'Ville inconnue',
            date: date,
            heure_dep: heure_dep,
            heure_arr: heure_arr,
            agencies: {
              nom: agency.nom || 'TravelHub'
            }
          }
        }
      })

      console.log('‚úÖ Donn√©es enrichies finales:', enrichedBookings);
      return enrichedBookings
    } catch (error) {
      console.error('Erreur dans getUserBookings:', error)
      throw error
    }
  },

  // R√©cup√©rer une r√©servation par ID
  async getBookingById(bookingId) {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .select('*')
        .eq('id', bookingId)
        .single()

      if (error) {
        console.error('Erreur lors de la r√©cup√©ration de la r√©servation:', error)
        throw error
      }

      return data
    } catch (error) {
      console.error('Erreur dans getBookingById:', error)
      throw error
    }
  },

  // Annuler une r√©servation
  async cancelBooking(bookingId, reason = '') {
    try {
      // Validation de l'ID
      if (!bookingId) {
        throw new Error('ID de r√©servation manquant');
      }
      
      // V√©rifier si c'est un UUID valide (36 caract√®res avec des tirets)
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(bookingId)) {
        console.error('‚ùå ID invalide pour annulation:', bookingId, 'Type:', typeof bookingId);
        throw new Error(`ID de r√©servation invalide: ${bookingId}. Attendu UUID format.`);
      }
      
      console.log('‚úÖ ID valide pour annulation:', bookingId);
      
      // 1. R√©cup√©rer les d√©tails de la r√©servation
      const booking = await this.getBookingById(bookingId)
      
      // 2. Lib√©rer les si√®ges
      const seatNumbers = booking.seat_number.split(', ')
      const { error: seatError } = await supabase
        .from('seat_maps')
        .update({ is_available: true })
        .eq('trip_id', booking.trip_id)
        .in('seat_number', seatNumbers)

      if (seatError) {
        console.error('Erreur lors de la lib√©ration des si√®ges:', seatError)
      }

      // 3. Mettre √† jour le statut de la r√©servation
      const { data, error } = await supabase
        .from('bookings')
        .update({
          booking_status: 'cancelled',
          updated_at: new Date().toISOString()
        })
        .eq('id', bookingId)
        .select()
        .single()

      if (error) {
        console.error('Erreur lors de l\'annulation:', error)
        throw error
      }

      console.log('R√©servation annul√©e:', data)
      return data
    } catch (error) {
      console.error('Erreur dans cancelBooking:', error)
      throw error
    }
  },

  // Confirmer une r√©servation
  async confirmBooking(bookingId) {
    try {
      const { data, error } = await supabase
        .from('bookings')
        .update({
          booking_status: 'confirmed',
          confirmed_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', bookingId)
        .select()
        .single()

      if (error) {
        console.error('Erreur lors de la confirmation:', error)
        throw error
      }

      console.log('R√©servation confirm√©e:', data)
      return data
    } catch (error) {
      console.error('Erreur dans confirmBooking:', error)
      throw error
    }
  },

  // Fonction utilitaire pour cr√©er des donn√©es de test
  async createTestData(userId) {
    try {
      console.log('üß™ Cr√©ation de donn√©es de test...');
      
      // 1. Cr√©er ou r√©cup√©rer une agence de test
      const { data: existingAgency } = await supabase
        .from('agencies')
        .select('id')
        .eq('nom', 'TravelHub Test')
        .single();
        
      let agencyId = existingAgency?.id;
      
      if (!agencyId) {
        const { data: newAgency, error: agencyError } = await supabase
          .from('agencies')
          .insert({
            nom: 'TravelHub Test',
            email: 'test@travelhub.com',
            phone: '+237600000000'
          })
          .select('id')
          .single();
          
        if (agencyError) {
          console.error('Erreur cr√©ation agence test:', agencyError);
          agencyId = null;
        } else {
          agencyId = newAgency.id;
        }
      }
      
      // 2. Cr√©er des trajets de test
      const testTrips = [
        {
          ville_depart: 'Douala',
          ville_arrivee: 'Yaound√©',
          date: '2025-08-25',
          heure_dep: '08:00',
          heure_arr: '12:00',
          agency_id: agencyId,
          bus_type: 'VIP',
          price_fcfa: 5500
        },
        {
          ville_depart: 'Bafoussam', 
          ville_arrivee: 'Douala',
          date: '2025-08-26',
          heure_dep: '14:30',
          heure_arr: '18:00',
          agency_id: agencyId,
          bus_type: 'Standard',
          price_fcfa: 3000
        }
      ];
      
      const { data: createdTrips, error: tripsError } = await supabase
        .from('trips')
        .upsert(testTrips, { 
          onConflict: 'ville_depart,ville_arrivee,date,heure_dep',
          ignoreDuplicates: true 
        })
        .select('id');
        
      if (tripsError) {
        console.error('Erreur cr√©ation trajets test:', tripsError);
        return;
      }
      
      console.log('‚úÖ Trajets de test cr√©√©s:', createdTrips);
      
      // 3. Cr√©er des r√©servations de test
      if (createdTrips && createdTrips.length > 0) {
        const testBookings = createdTrips.map((trip, index) => ({
          user_id: userId,
          trip_id: trip.id,
          seat_number: `${12 + index}A`,
          total_price_fcfa: index === 0 ? 5500 : 3000,
          booking_status: 'confirmed',
          payment_status: 'confirmed',
          payment_method: index === 0 ? 'Orange Money' : 'Stripe',
          passenger_name: 'Test User',
          passenger_phone: '+237600000000',
          booking_reference: `TEST${index + 1}${Date.now()}`
        }));
        
        const { data: createdBookings, error: bookingsError } = await supabase
          .from('bookings')
          .insert(testBookings)
          .select('*');
          
        if (bookingsError) {
          console.error('Erreur cr√©ation r√©servations test:', bookingsError);
        } else {
          console.log('‚úÖ R√©servations de test cr√©√©es:', createdBookings);
        }
      }
      
    } catch (error) {
      console.error('Erreur lors de la cr√©ation des donn√©es de test:', error);
    }
  },

  // Cr√©er une r√©compense de parrainage
  async createReferralReward(referralId, referredUserId, amount) {
    try {
      console.log(`üîç V√©rification r√©compense parrainage pour referralId: ${referralId}`)
      
      // R√©cup√©rer les informations du parrainage
      const { data: referralData, error: referralError } = await supabase
        .from('referrals')
        .select('referrer_id, status')
        .eq('id', referralId)
        .single()

      if (referralError || !referralData) {
        console.error('Impossible de trouver le parrainage:', referralError)
        return
      }

      // ‚ö†Ô∏è IMPORTANT : V√©rifier que c'est la PREMI√àRE r√©servation de l'ami parrain√©
      const { data: existingBookings, error: bookingsError } = await supabase
        .from('bookings')
        .select('id')
        .eq('user_id', referredUserId)

      if (bookingsError) {
        console.error('Erreur lors de la v√©rification des r√©servations:', bookingsError)
        return
      }

      const bookingCount = existingBookings ? existingBookings.length : 0
      console.log(`üìä Nombre de r√©servations pour l'utilisateur ${referredUserId}: ${bookingCount}`)

      // Si ce n'est PAS la premi√®re r√©servation, ne pas cr√©er de r√©compense
      if (bookingCount > 1) {
        console.log('‚ùå Ce n\'est pas la premi√®re r√©servation - aucune r√©compense cr√©√©e')
        return
      }

      console.log('‚úÖ C\'est la premi√®re r√©servation - cr√©ation de la r√©compense')

      // Cr√©er la r√©compense pour le parrain (UNIQUEMENT)
      const { data: reward, error: rewardError } = await supabase
        .from('referral_rewards')
        .insert({
          referral_id: referralId,
          referrer_id: referralData.referrer_id,
          reward_amount: amount,
          is_claimed: false,
          created_at: new Date().toISOString()
        })
        .select()
        .single()

      if (rewardError) {
        console.error('Erreur lors de la cr√©ation de la r√©compense:', rewardError)
        return
      }

      // üÜï Marquer le parrainage comme compl√©t√© et disponible
      await supabase
        .from('referrals')
        .update({ 
          status: 'completed',
          completed_at: new Date().toISOString()
        })
        .eq('id', referralId)

      // üÜï Mettre √† jour les statistiques du parrain
      // D'abord r√©cup√©rer les valeurs actuelles
      const { data: currentUser, error: getUserError } = await supabase
        .from('users')
        .select('total_referrals, total_referral_earnings')
        .eq('id', referralData.referrer_id)
        .single()

      if (!getUserError && currentUser) {
        const newTotalReferrals = (currentUser.total_referrals || 0) + 1
        const newTotalEarnings = (currentUser.total_referral_earnings || 0) + amount

        await supabase
          .from('users')
          .update({
            total_referrals: newTotalReferrals,
            total_referral_earnings: newTotalEarnings
          })
          .eq('id', referralData.referrer_id)

        console.log(`üìä Statistiques mises √† jour: ${newTotalReferrals} parrainages, ${newTotalEarnings} FCFA gagn√©s`)
      }

      console.log(`üéâ R√©compense de ${amount} FCFA cr√©√©e pour le parrain:`, reward)
      return reward
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de la r√©compense de parrainage:', error)
    }
  },

  // üÜï Fonction pour r√©cup√©rer les r√©compenses disponibles d'un utilisateur
  async getAvailableRewards(userId) {
    try {
      const { data: rewards, error } = await supabase
        .from('referral_rewards')
        .select('*')
        .eq('referrer_id', userId)
        .eq('is_claimed', false)
        .gte('expires_at', new Date().toISOString())
        .order('created_at', { ascending: true })

      if (error) {
        console.error('Erreur r√©cup√©ration r√©compenses:', error)
        return []
      }

      const totalAmount = rewards?.reduce((sum, reward) => sum + reward.reward_amount, 0) || 0
      console.log(`üí∞ Utilisateur ${userId} a ${rewards?.length || 0} r√©compenses disponibles pour ${totalAmount} FCFA`)
      
      return { rewards: rewards || [], totalAmount }
    } catch (error) {
      console.error('Erreur dans getAvailableRewards:', error)
      return { rewards: [], totalAmount: 0 }
    }
  },

  // üÜï Fonction pour appliquer une r√©duction de parrainage
  async applyReferralDiscount(userId, bookingAmount) {
    try {
      const { rewards, totalAmount } = await this.getAvailableRewards(userId)
      
      if (totalAmount === 0) {
        return { hasDiscount: false, discountAmount: 0, finalPrice: bookingAmount }
      }

      // Appliquer la r√©duction (maximum = montant disponible)
      const discountAmount = Math.min(totalAmount, bookingAmount)
      const finalPrice = bookingAmount - discountAmount

      console.log(`üí∞ R√©duction appliqu√©e: ${discountAmount} FCFA sur ${bookingAmount} FCFA`)
      
      return {
        hasDiscount: true,
        discountAmount,
        finalPrice,
        availableRewards: rewards
      }
    } catch (error) {
      console.error('Erreur dans applyReferralDiscount:', error)
      return { hasDiscount: false, discountAmount: 0, finalPrice: bookingAmount }
    }
  },

  // üÜï Fonction pour marquer les r√©compenses comme utilis√©es
  async claimRewards(userId, usedAmount, bookingId) {
    try {
      const { rewards } = await this.getAvailableRewards(userId)
      
      let remainingAmount = usedAmount
      const rewardsToUpdate = []

      for (const reward of rewards) {
        if (remainingAmount <= 0) break

        const amountToUse = Math.min(reward.reward_amount, remainingAmount)
        rewardsToUpdate.push(reward.id)
        remainingAmount -= amountToUse

        // Marquer comme utilis√©e
        await supabase
          .from('referral_rewards')
          .update({
            is_claimed: true,
            claimed_at: new Date().toISOString(),
            applied_to_booking_id: bookingId
          })
          .eq('id', reward.id)
      }

      console.log(`‚úÖ ${rewardsToUpdate.length} r√©compenses marqu√©es comme utilis√©es`)
      return true
    } catch (error) {
      console.error('Erreur dans claimRewards:', error)
      return false
    }
  }
}
