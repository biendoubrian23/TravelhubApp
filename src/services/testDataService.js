import { bookingService } from '../services/bookingService';
import { supabase } from '../services/supabase';

// Service pour cr√©er des donn√©es de test uniquement quand n√©cessaire
export const testDataService = {
  // Cr√©er des donn√©es de test pour l'utilisateur connect√©
  async createTestDataForUser(userId) {
    try {
      console.log('üß™ Cr√©ation de donn√©es de test pour utilisateur:', userId);
      
      // V√©rifier si l'utilisateur a d√©j√† des r√©servations
      const existingBookings = await bookingService.getUserBookings(userId);
      if (existingBookings && existingBookings.length > 0) {
        console.log('‚úÖ L\'utilisateur a d√©j√† des r√©servations, pas de cr√©ation de test');
        return existingBookings;
      }
      
      // R√©cup√©rer un trajet existant dans la BD pour cr√©er une vraie r√©servation de test
      const { data: testTrip, error: tripError } = await supabase
        .from('trips')
        .select('id, ville_depart, ville_arrivee, prix, is_vip')
        .limit(1)
        .single();
        
      if (tripError || !testTrip) {
        console.warn('‚ùå Aucun trajet trouv√© pour cr√©er des donn√©es de test');
        return [];
      }
      
      console.log('üöå Trajet de test trouv√©:', testTrip);
      
      // Cr√©er une r√©servation de test avec un vrai trajet
      const testBookingData = {
        tripId: testTrip.id,
        userId: userId,
        seatNumber: '1A', // Si√®ge de test
        totalPrice: testTrip.prix,
        paymentMethod: 'Orange Money'
      };
      
      console.log('üìù Cr√©ation de r√©servation de test:', testBookingData);
      
      const testBooking = await bookingService.createBooking(testBookingData);
      
      if (testBooking) {
        console.log('‚úÖ R√©servation de test cr√©√©e avec succ√®s:', testBooking);
        return [testBooking];
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de donn√©es de test:', error);
      return [];
    }
  },
  
  // Nettoyer les donn√©es de test (optionnel)
  async cleanTestData(userId) {
    try {
      const { error } = await supabase
        .from('bookings')
        .delete()
        .eq('user_id', userId)
        .like('booking_reference', 'TH%'); // Supprimer uniquement les r√©servations avec r√©f√©rence TH
        
      if (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error);
      } else {
        console.log('üßπ Donn√©es de test nettoy√©es');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du nettoyage:', error);
    }
  },
  
  // V√©rifier la disponibilit√© des si√®ges pour un trajet
  async checkSeatAvailability(tripId) {
    try {
      const { data: seats, error } = await supabase
        .from('seat_maps')
        .select('seat_number, is_available, seat_type')
        .eq('trip_id', tripId)
        .eq('is_available', true)
        .limit(10);
        
      if (error) {
        console.error('‚ùå Erreur v√©rification si√®ges:', error);
        return [];
      }
      
      console.log(`üí∫ ${seats?.length || 0} si√®ges disponibles pour le trajet ${tripId}`);
      return seats || [];
    } catch (error) {
      console.error('‚ùå Erreur v√©rification si√®ges:', error);
      return [];
    }
  }
};
