/**
 * Service Avatar simplifi√© pour TravelHub
 * Version sans auto-cr√©ation de bucket pour √©viter les erreurs RLS
 */

import * as ImagePicker from 'expo-image-picker';
import { supabase } from './supabaseClient';

class AvatarServiceSimple {
  constructor() {
    this.bucketName = 'avatars';
  }

  /**
   * S√©lectionner une image depuis la galerie
   */
  async pickImageFromGallery() {
    try {
      // Demander les permissions
      const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
      
      if (status !== 'granted') {
        throw new Error('Permission d\'acc√®s √† la galerie refus√©e');
      }

      // Ouvrir la galerie
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images, // Revenir √† l'ancienne syntaxe qui marchait
        allowsEditing: true,
        aspect: [1, 1], // Carr√©
        quality: 0.8,
        base64: false,
      });

      return result;
    } catch (error) {
      console.error('Erreur s√©lection image:', error);
      throw error;
    }
  }

  /**
   * T√©l√©charger l'avatar vers Supabase Storage
   */
  async uploadAvatar(userId, imageUri) {
    try {
      console.log('üîÑ D√©but upload pour:', userId);
      console.log('üìÅ URI image:', imageUri);
      
      // V√©rifier l'URI d'abord
      if (!imageUri || !imageUri.startsWith('file://')) {
        throw new Error('URI d\'image invalide');
      }

      // Convertir l'image en blob avec une m√©thode plus robuste
      const response = await fetch(imageUri);
      
      if (!response.ok) {
        throw new Error(`Impossible de lire l'image: ${response.status}`);
      }
      
      const blob = await response.blob();
      console.log('üì¶ Blob cr√©√©, taille:', blob.size, 'type:', blob.type);

      // Nom du fichier avec timestamp
      const timestamp = Date.now();
      const fileName = `${userId}/avatar_${timestamp}.jpg`;
      console.log('üìù Nom fichier:', fileName);

      // Upload vers Supabase Storage avec gestion d'erreur am√©lior√©e
      const { data, error } = await supabase.storage
        .from(this.bucketName)
        .upload(fileName, blob, {
          cacheControl: '3600',
          upsert: true,
          contentType: 'image/jpeg'
        });

      if (error) {
        console.error('‚ùå Erreur upload Supabase:', error);
        
        // Messages d'erreur sp√©cifiques
        if (error.message.includes('not found') || error.message.includes('bucket')) {
          throw new Error('Le bucket de stockage n\'existe pas. Veuillez configurer Supabase.');
        }
        
        if (error.message.includes('Network')) {
          throw new Error('Probl√®me de connexion. V√©rifiez votre r√©seau et r√©essayez.');
        }
        
        if (error.message.includes('policy')) {
          throw new Error('Permissions insuffisantes. Configurez les politiques Supabase.');
        }
        
        throw new Error(`Erreur d'upload: ${error.message}`);
      }

      console.log('‚úÖ Upload r√©ussi:', data);

      // Obtenir l'URL publique
      const { data: urlData } = supabase.storage
        .from(this.bucketName)
        .getPublicUrl(fileName);

      console.log('üîó URL publique:', urlData.publicUrl);

      return {
        path: data.path,
        publicUrl: urlData.publicUrl,
        fileName: fileName,
      };
    } catch (error) {
      console.error('Erreur lors de l\'upload:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour l'avatar utilisateur dans la base de donn√©es
   */
  async updateUserAvatar(userId, avatarUrl) {
    try {
      // V√©rification de s√©curit√© c√¥t√© app
      const { data: { user } } = await supabase.auth.getUser();
      if (!user || user.id !== userId) {
        throw new Error('Non autoris√© √† modifier cet utilisateur');
      }

      const { error } = await supabase
        .from('users')
        .update({ 
          avatar_url: avatarUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', userId);

      if (error) {
        console.error('Erreur mise √† jour BD:', error);
        throw new Error(`Erreur de mise √† jour: ${error.message}`);
      }

      return true;
    } catch (error) {
      console.error('Erreur lors de la mise √† jour de l\'avatar:', error);
      throw error;
    }
  }

  /**
   * Processus complet de changement d'avatar
   */
  async changeAvatar(userId, currentAvatarUrl = null) {
    try {
      // 1. S√©lectionner l'image
      const result = await this.pickImageFromGallery();
      
      if (result.cancelled) {
        return { success: false, error: 'S√©lection annul√©e' };
      }

      if (!result.assets || result.assets.length === 0) {
        return { success: false, error: 'Aucune image s√©lectionn√©e' };
      }

      const selectedImage = result.assets[0];

      // 2. Upload la nouvelle image
      const uploadResult = await this.uploadAvatar(userId, selectedImage.uri);

      // 3. Mettre √† jour la base de donn√©es
      await this.updateUserAvatar(userId, uploadResult.publicUrl);

      return {
        success: true,
        avatarUrl: uploadResult.publicUrl,
        message: 'Photo de profil mise √† jour avec succ√®s !',
      };
    } catch (error) {
      console.error('Erreur lors du changement d\'avatar:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la mise √† jour de l\'avatar'
      };
    }
  }
}

export default new AvatarServiceSimple();
