import { tripService } from './tripService'
import { mockTripService } from './mockTripService'

export const hybridTripService = {
  // Service intelligent qui essaie les donn√©es r√©elles puis fallback vers mock
  async searchTrips(searchParams) {
    try {
      console.log('üîç Tentative de recherche avec donn√©es r√©elles...')
      
      // Essayer d'abord avec les donn√©es r√©elles
      const realTrips = await tripService.searchTrips(searchParams)
      
      if (realTrips && realTrips.length > 0) {
        console.log(`‚úÖ ${realTrips.length} trajets r√©els trouv√©s`)
        return realTrips
      } else {
        console.log('‚ö†Ô∏è Aucun trajet r√©el trouv√©, utilisation du fallback')
        // Fallback vers les donn√©es mock√©es
        return this.getMockTrips(searchParams)
      }
    } catch (error) {
      console.log('‚ùå Erreur avec donn√©es r√©elles, utilisation du fallback:', error.message)
      // Fallback vers les donn√©es mock√©es
      return this.getMockTrips(searchParams)
    }
  },

  // G√©n√©rer des donn√©es mock√©es avec le bon format
  getMockTrips(searchParams) {
    try {
      const mockTrips = mockTripService.generateTripsForDays(searchParams, 5)
      console.log(`üé≠ ${mockTrips.length} trajets mock√©s g√©n√©r√©s`)
      return mockTrips
    } catch (error) {
      console.error('‚ùå Erreur m√™me avec les donn√©es mock√©es:', error)
      return []
    }
  },

  // V√©rifier la disponibilit√© des donn√©es r√©elles
  async checkRealDataAvailability() {
    try {
      const testResult = await tripService.getPopularTrips(1)
      return testResult && testResult.length > 0
    } catch (error) {
      return false
    }
  },

  // Obtenir des statistiques sur la source de donn√©es
  async getDataSourceInfo() {
    const hasRealData = await this.checkRealDataAvailability()
    
    return {
      hasRealData,
      dataSource: hasRealData ? 'database' : 'mock',
      message: hasRealData 
        ? 'Donn√©es en temps r√©el depuis la base de donn√©es'
        : 'Donn√©es de d√©monstration (base de donn√©es vide ou inaccessible)'
    }
  }
}
